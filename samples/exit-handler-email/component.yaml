name: sendmail
description: |
  This task sends a simple email to receivers via SMTP server
inputs:
  - {name: server, description: 'secret name for SMTP server information (url, port, password)'}
  - {name: subject, description: 'plain text email subject'}
  - {name: body, description: 'plain text email body'}
  - {name: sender, description: 'sender email address'}
  - {name: recipients, description: 'recipient email addresses (space delimited list)'}
  - {name: attachment_path, description: 'email attachment file path'}
implementation:
  container:
    image: docker.io/library/python:3.8-alpine@sha256:c31682a549a3cc0a02f694a29aed07fd252ad05935a8560237aed99b8e87bf77 #tag: 3.8-alpine
    command:
    - python3
    - -u
    - -c
    - |
      #!/usr/bin/env python3
      import argparse
      _parser = argparse.ArgumentParser('sendmail inputs')
      _parser.add_argument("--server", type=str, required=True)
      _parser.add_argument("--subject", type=str, required=True)
      _parser.add_argument("--body", type=str, required=True)
      _parser.add_argument("--sender", type=str, required=True)
      _parser.add_argument("--recipients", type=str, required=True)
      _parser.add_argument("--attachment_path", type=str, default='')
      _parsed_args = _parser.parse_args()

      import smtplib, ssl, os
      from pathlib import Path
      from email.mime.multipart import MIMEMultipart
      from email.mime.base import MIMEBase
      from email.mime.text import MIMEText
      from email.utils import COMMASPACE, formatdate
      from email import encoders
      port = os.getenv('PORT')
      smtp_server = os.getenv('SERVER')
      sender_email = "$(params.sender)"
      receiver_emails = "$(params.recipients)"
      user = os.getenv('USER')
      password = os.getenv('PASSWORD')
      tls = os.getenv('TLS')
      path = _parsed_args.attachment_path

      msg = MIMEMultipart()
      msg['From'] = sender_email
      msg['To'] = receiver_emails
      msg['Subject'] = "$(params.subject)"
      msg.attach(MIMEText("$(params.body)"))
      if tls == 'True':
          context = ssl.create_default_context()
          server = smtplib.SMTP_SSL(smtp_server, port, context=context)
      else:
          server = smtplib.SMTP(smtp_server, port)
      if password != '':
          server.login(user, password)
      part = MIMEBase('application', "octet-stream")
      with open(path, 'rb') as file:
          part.set_payload(file.read())
      encoders.encode_base64(part)
      part.add_header('Content-Disposition',
                      'attachment; filename="{}"'.format(Path(path).name))
      msg.attach(part)
      for receiver in receiver_emails.split(' '):
          server.sendmail(sender_email, receiver, msg.as_string())
      server.quit()
    args: [
      --server, {inputValue: server},
      --subject, {inputValue: subject},
      --body, {inputValue: body},
      --sender, {inputValue: sender},
      --recipients, {inputValue: recipients},
      --attachment_path, {inputValue: attachment_path},
    ]
